{"version":3,"file":"post-new-page.js","sourceRoot":"","sources":["../../../src/page/post-new-page.ts"],"names":[],"mappings":";;;IAMA;QAEI,qBAAoB,QAAkB;YAAlB,aAAQ,GAAR,QAAQ,CAAU;YAClC,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;QAED,0BAAI,GAAJ;YAAA,iBAOC;YANG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC;iBAC7B,gBAAgB,CAAC,QAAQ,EAAE,UAAC,KAAY;gBACrC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAI,CAAC,MAAM,EAAE,CAAC;gBACd,OAAO,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;QACX,CAAC;QAED,4BAAM,GAAN;YAAA,iBAQC;YAPG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;gBACjB,OAAO;aACV;YACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACf,KAAK,EAAE,cAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;gBACvC,IAAI,EAAE,cAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;aACxC,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;QAC1C,CAAC;QAED,6BAAO,GAAP;YACI,IAAM,SAAS,GAAG,IAAI,2BAAgB,CAAC;gBACnC,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,oBAAU,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,iBAAiB,EAAC;gBAC1F,EAAC,aAAa,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,oBAAU,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,mBAAmB,EAAC;aAC9F,CAAC,CAAA;YACF,OAAO,SAAS,CAAC,OAAO,EAAE,CAAA;QAC9B,CAAC;QAED,kCAAY,GAAZ;YACI,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,sBAAsB,CAAC;QAClD,CAAC;QAGL,kBAAC;IAAD,CAAC,AAtCD,IAsCC;;IAED,IAAI,WAAW,CAAC,IAAI,mBAAQ,EAAE,CAAC,CAAC","sourcesContent":["import Page from \"./page\";\nimport PostHttp from \"../http/post-http\";\nimport Form from \"../components/form\";\nimport ValidatorManager from \"../components/validators/validator-manager\";\nimport Validators from \"../components/validators/validators\";\n\nexport default class PostNewPage implements Page {\n\n    constructor(private postHttp: PostHttp) {\n        this.init();\n    }\n\n    init(): void {\n        document.querySelector('#my-form')\n            .addEventListener('submit', (event: Event) => {\n                event.preventDefault();\n                this.submit();\n                return false;\n            });\n    }\n\n    submit(): void {\n        if (!this.isValid()) {\n            return;\n        }\n        this.postHttp.save({\n            title: Form.getValueFromField('#title'),\n            body: Form.getValueFromField('#body')\n        }).then((obj) => this.goToPostList());\n    }\n\n    isValid(): boolean {\n        const validator = new ValidatorManager([\n            {selectorField: '#title', rules: [Validators.required], messageInvalid: 'Título inválido'},\n            {selectorField: '#body', rules: [Validators.required], messageInvalid: 'Conteúdo inválido'},\n        ])\n        return validator.isValid()\n    }\n\n    goToPostList(): void {\n        window.location.href = '/post/post-list.html';\n    }\n\n\n}\n\nnew PostNewPage(new PostHttp());"]}